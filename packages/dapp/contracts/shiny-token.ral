import "std/fungible_token_interface"

Contract ShinyToken(
  symbol: ByteVec,
  name: ByteVec,
  decimals: U256,
  totalSupply: U256
) implements IFungibleToken {
  pub fn getTotalSupply() -> U256 {
      return totalSupply
  }

  pub fn getSymbol() -> ByteVec {
      return symbol
  }

  pub fn getName() -> ByteVec {
      return name
  }

  pub fn getDecimals() -> U256 {
      return decimals
  }

  @using(assetsInContract = true, checkExternalCaller = false)
  pub fn transfer(to: Address, amount: U256) -> () {
    transferTokenFromSelf!(to, selfTokenId!(), amount)
    transferTokenFromSelf!(to, ALPH, dustAmount!())
  }

  @using(assetsInContract = true, checkExternalCaller = false)
  pub fn destroy(to: Address) -> () {
    destroySelf!(to)
  }
}
